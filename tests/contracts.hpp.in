#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio::testing {

struct eos_contracts {
   static std::vector<uint8_t> system_wasm() { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.system/eosio.system.wasm"); }
   static std::vector<char>    system_abi()  { return read_abi("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.system/eosio.system.abi"); }

   static std::vector<uint8_t> token_wasm()  { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.token/eosio.token.wasm"); }
   static std::vector<char>    token_abi()   { return read_abi("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.token/eosio.token.abi"); }

   static std::vector<uint8_t> fees_wasm()   { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.fees/eosio.fees.wasm"); }

   static std::vector<uint8_t> msig_wasm()   { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.msig/eosio.msig.wasm"); }
   static std::vector<char>    msig_abi()    { return read_abi("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.msig/eosio.msig.abi"); }

   static std::vector<uint8_t> wrap_wasm()   { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.wrap/eosio.wrap.wasm"); }
   static std::vector<char>    wrap_abi()    { return read_abi("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.wrap/eosio.wrap.abi"); }

   static std::vector<uint8_t> bios_wasm()   { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.bios/eosio.bios.wasm"); }
   static std::vector<char>    bios_abi()    { return read_abi("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.bios/eosio.bios.abi"); }
   
   static std::vector<uint8_t> bpay_wasm()   { return read_wasm("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.bpay/eosio.bpay.wasm"); }
   static std::vector<char>    bpay_abi()    { return read_abi("${EOS_CONTRACTS_BINARY_DIR}/contracts/eosio.bpay/eosio.bpay.abi"); }
};

struct xyz_contracts {
   static std::vector<uint8_t> system_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/system.wasm"); }
   static std::vector<char>    system_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/system.abi"); }

   static std::vector<uint8_t> token_wasm()  { return read_wasm("${CMAKE_BINARY_DIR}/contracts/token.wasm"); }
   static std::vector<char>    token_abi()   { return read_abi("${CMAKE_BINARY_DIR}/contracts/token.abi"); }
};

} // namespace eosio::testing
